/******************************************************************************
 PrefsMgr.cpp

	<Description>

	BASE CLASS = public JXPrefsManager

	Copyright (C) 1998 by Glenn W. Bach.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include <PrefsMgr.h>
#include <FitDirector.h>
#include <globals.h>

#include <jx-af/jx/JXChooseSaveFile.h>
#include <jx-af/jx/JXPTPrinter.h>
#include <jx-af/jx/JXWindow.h>

#include <jx-af/jcore/JPtrArray-JString.h>
#include <jx-af/jcore/jDirUtil.h>
#include <unistd.h>
#include <jx-af/jcore/jAssert.h>

const JFileVersion kCurrentPrefsFileVersion = 2;

/******************************************************************************
 Constructor

 *****************************************************************************/

PrefsMgr::PrefsMgr
	(
	bool* isNew
	)
	:
   JXPrefsManager(kCurrentPrefsFileVersion, true)
{
	*isNew = JPrefsManager::UpgradeData();
	JXGetChooseSaveFile()->SetPrefInfo(this, kChooseSaveFilePrefsID);
	JXGetChooseSaveFile()->JPrefObject::ReadPrefs();
}

/******************************************************************************
 Destructor

 *****************************************************************************/

PrefsMgr::~PrefsMgr()
{
	JXGetChooseSaveFile()->JPrefObject::WritePrefs();
	SetData(kProgramVersionID, JGetString("VERSION"));
	SaveToDisk();
}

/******************************************************************************
 GetGloveVersionStr

 ******************************************************************************/

JString
PrefsMgr::GetGloveVersionStr()
	const
{
	std::string data;
	if (GetData(kProgramVersionID, &data))
	{
		return JString(data);
	}
	else
	{
		return JString("< 0.8.0");		// didn't exist before this version
	}
}

/******************************************************************************
 UpgradeData (virtual protected)

 ******************************************************************************/

void
PrefsMgr::UpgradeData
	(
	const bool			isNew,
	const JFileVersion	currentVersion
	)
{
}

/******************************************************************************
 Receive (virtual protected)

 ******************************************************************************/

void
PrefsMgr::Receive
	(
	JBroadcaster*	sender,
	const Message&	message
	)
{
//	if (sender == itsEditPrefsDialog && message.Is(JXDialogDirector::kDeactivated))
//		{
//		const JXDialogDirector::Deactivated* info =
//			dynamic_cast<const JXDialogDirector::Deactivated*>(&message);
//		assert( info != nullptr );
//		if (info->Successful())
//			{
//			UpdatePrefs(itsEditPrefsDialog);
//			}
//		itsEditPrefsDialog = nullptr;
//		}
}

/******************************************************************************
 EditPrefs

 ******************************************************************************/

void
PrefsMgr::EditPrefs()
{
}

/******************************************************************************
 GetWindowSize (private)

 ******************************************************************************/

void
PrefsMgr::GetWindowSize
	(
	const JPrefID	id,
	JXWindow*		window
	)
	const
{
	if (IDValid(id))
	{
		std::string data;
		GetData(id, &data);
		std::istringstream dataStream(data);
		window->ReadGeometry(dataStream);
	}
}

/******************************************************************************
 SaveWindowSize (private)

 ******************************************************************************/

void
PrefsMgr::SaveWindowSize
	(
	const JPrefID	id,
	JXWindow*		window
	)
{
	std::ostringstream data;
	window->WriteGeometry(data);
	const JPoint dtl = window->GetDesktopLocation();
	window->Place(dtl.x, dtl.y);

	SetData(id, data);
}

/******************************************************************************
 PrinterSetup

 ******************************************************************************/

void
PrefsMgr::WritePrinterSetup
	(
	JXPTPrinter* printer
	)
{
	std::ostringstream data;
	printer->WriteXPTSetup(data);
	SetData(kPTPrinterSetupID, data);
}

void
PrefsMgr::ReadPrinterSetup
	(
	JXPTPrinter* printer
	)
{
	if (IDValid(kPTPrinterSetupID))
	{
		std::string data;
		GetData(kPTPrinterSetupID, &data);
		std::istringstream dataStream(data);
		printer->ReadXPTSetup(dataStream);
	}
}

/******************************************************************************
 FitDirectorSetup

 ******************************************************************************/

void
PrefsMgr::WriteFitDirectorSetup
	(
	FitDirector* dir
	)
{
	std::ostringstream data;
	dir->WritePrefs(data);
	SetData(kFitDirectorID, data);
}

void
PrefsMgr::ReadFitDirectorSetup
	(
	FitDirector* dir
	)
{
	if (IDValid(kFitDirectorID))
	{
		std::string data;
		GetData(kFitDirectorID, &data);
		std::istringstream dataStream(data);
		dir->ReadPrefs(dataStream);
	}
}
